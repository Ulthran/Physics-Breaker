//
//  DrawingBoardScene.swift
//  Physics Breaker
//
//  Created by Charlie Bushman on 1/5/16.
//  Copyright Â© 2016 imaginary inc. All rights reserved.
//

import Foundation
import SpriteKit
import UIKit

class DrawingBoardScene: SKScene {
    
    let titleLabel = SKLabelNode(text: "PHYSICS BREAKER")
    
    let menuButton = UIButton()
    
    let calculateButton = UIButton()
    
    let calculateMenu = UIBarButtonItem()
    
    let drawingBoard = SKSpriteNode(imageNamed: "Drawing Board Outline")
    
    let sideBar = SKSpriteNode(imageNamed: "Drawing Board Outline")
    
    let sideBarItem1 = UIButton()
    let sideBarItem2 = UIButton()
    let sideBarItem3 = UIButton()
    let sideBarItem4 = UIButton()
    //let sideBarItem5 = UIButton()
    
    let sideBarItem1_1 = UIButton()
    let sideBarItem1_2 = UIButton()
    let sideBarItem1_3 = UIButton()
    //let sideBarItem1_4 = UIButton()
    //let sideBarItem1_5 = UIButton()
    
    let sideBarItem2_1 = UIButton()
    let sideBarItem2_2 = UIButton()
    let sideBarItem2_3 = UIButton()
    let sideBarItem2_4 = UIButton()
    let sideBarItem2_5 = UIButton()
    
    let sideBarItem3_1 = UIButton()
    let sideBarItem3_2 = UIButton()
    let sideBarItem3_3 = UIButton()
    let sideBarItem3_4 = UIButton()
    //let sideBarItem3_5 = UIButton()
    
    let sideBarItem4_1 = UIButton()
    let sideBarItem4_2 = UIButton()
    let sideBarItem4_3 = UIButton()
    let sideBarItem4_4 = UIButton()
    //let sideBarItem4_5 = UIButton()
    
    /*let sideBarItem5_1 = UIButton()
    let sideBarItem5_2 = UIButton()
    let sideBarItem5_3 = UIButton()
    let sideBarItem5_4 = UIButton()
    let sideBarItem5_5 = UIButton()*/
    
    let sideBarBackButton = UIButton()
    
    override func didMoveToView(view: SKView) {
        self.backgroundColor = UIColor.whiteColor()  //sets scene's background to white
        
        setUpScene()
    }
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------setUpScene()--------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/


    func setUpScene(){
        /*LABEL: Displays title*/
        titleLabel.fontColor = UIColor.blackColor()
        titleLabel.fontSize = 50.0
        titleLabel.position = CGPoint(x: CGRectGetMidX(self.frame), y: 560)
        
        self.addChild(titleLabel)
        
        /*BUTTON: Button in top right that returns to main menu*/
        menuButton.setTitle("MENU", forState: UIControlState.Normal)
        menuButton.titleLabel!.font = UIFont(name: "HelveticaNeue-UltraLight", size: 20.0)
        menuButton.frame = CGRect(x: self.view!.frame.size.width-100, y: self.view!.frame.size.height-300, width: 100, height: 30)
        menuButton.setTitleColor(UIColor.blackColor(), forState: UIControlState.Normal)
        menuButton.addTarget(self, action: "goToMenu:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(menuButton)
        
        /*BUTTON: Allows user to calculate for the variable selected in the calculateMenu*/
        calculateButton.setTitle("Calculate: ", forState: UIControlState.Normal)
        calculateButton.titleLabel!.font = UIFont(name: "HelveticaNeue-UltraLight", size: 30.0)
        calculateButton.frame = CGRect(x: ((self.view!.frame.size.width)/2)-150, y: 280.0, width: 150, height: 30.0)
        calculateButton.setTitleColor(UIColor.blackColor(), forState: UIControlState.Normal)
        calculateButton.addTarget(self, action: "calculate:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(calculateButton)
        
        /*SPRITE NODE: Displays rectangle around drawing board*/
        drawingBoard.size = CGSize(width: 775.0, height: 400.0)
        drawingBoard.position = CGPoint(x: ((self.view!.frame.size.width)/2)+300.0, y: 350.0)
        
        self.addChild(drawingBoard)
        
        /*SPRITE NODE: Displays rectangle around sidebar*/
        sideBar.size = CGSize(width: 300.0, height: 400.0)
        sideBar.position = CGPoint(x: -25.0, y: 350.0)
        
        self.addChild(sideBar)
        
        /*BUTTON: Masses category in the sidebar*/
        sideBarItem1.setImage(UIImage(named:"Masses"), forState: UIControlState.Normal)
        sideBarItem1.frame = CGRect(x: 20.0, y: 70.0, width: 30.0, height: 30.0)
        sideBarItem1.addTarget(self, action: "massesSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem1)
        
        /*BUTTON: Surfaces category in the sidebar*/
        sideBarItem2.setImage(UIImage(named:"Surfaces"), forState: UIControlState.Normal)
        sideBarItem2.frame = CGRect(x: 20.0, y: 120.0, width: 30.0, height: 30.0)
        sideBarItem2.addTarget(self, action: "surfacesSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem2)
        
        /*BUTTON: Force vectors category in the sidebar*/
        sideBarItem3.setImage(UIImage(named:"Force Vectors"), forState: UIControlState.Normal)
        sideBarItem3.frame = CGRect(x: 20.0, y: 170.0, width: 30.0, height: 30.0)
        sideBarItem3.addTarget(self, action: "forceVectorsSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem3)
        
        /*BUTTON: Connectors category in the sidebar*/
        sideBarItem4.setImage(UIImage(named:"Connectors"), forState: UIControlState.Normal)
        sideBarItem4.frame = CGRect(x: 20.0, y: 220.0, width: 30.0, height: 30.0)
        sideBarItem4.addTarget(self, action: "connectorsSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem4)
        
        /*BUTTON: 5th category in the sidebar*/
        /*sideBarItem5.setImage(UIImage(named:"Category 5 Image"), forState: UIControlState.Normal)
        sideBarItem5.frame = CGRect(x: 20.0, y: 230.0, width: 30.0, height: 30.0)
        sideBarItem5.addTarget(self, action: "cat5SideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem5)*/
        
        /*Button: Adds a back button to the sidebar*/
        sideBarBackButton.setTitle("<back", forState: UIControlState.Normal)
        sideBarBackButton.frame = CGRect(x: 10.0, y: 245.0, width: 50.0, height: 30.0)
        sideBarBackButton.titleLabel!.font = UIFont(name: "HelveticaNeue-UltraLight", size: 15.0)
        sideBarBackButton.setTitleColor(UIColor.blackColor(), forState: UIControlState.Normal)
        sideBarBackButton.addTarget(self, action: "mainSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarBackButton)
    }
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------setUpSideBars()-----------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/
    
    
    
    func setUpMassesSideBar(){
        sideBarItem1_1.setImage(UIImage(named: "Frictionless Mass"), forState: UIControlState.Normal)
        sideBarItem1_1.frame = CGRect(x: 20.0, y: 70.0, width: 35.0, height: 30.0)
        sideBarItem1_1.addTarget(self, action: "createFrictionlessMass:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem1_2.setImage(UIImage(named: "Angular Mass"), forState: UIControlState.Normal)
        sideBarItem1_2.frame = CGRect(x: 20.0, y: 110.0, width: 30.0, height: 30.0)
        sideBarItem1_2.addTarget(self, action: "createAngularMass:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem1_3.setImage(UIImage(named: "Focal Point"), forState: UIControlState.Normal)
        sideBarItem1_3.frame = CGRect(x: 20.0, y: 150.0, width: 30.0, height: 30.0)
        sideBarItem1_3.addTarget(self, action: "createFocalPoint:", forControlEvents: UIControlEvents.TouchUpInside)
        /*sideBarItem1_4.setImage(UIImage(named: ""), forState: UIControlState.Normal)
        sideBarItem1_4.frame = CGRect(x: 20.0, y: 190.0, width: 30.0, height: 30.0)
        sideBarItem1_4.addTarget(self, action: "", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem1_5.setImage(UIImage(named: ""), forState: UIControlState.Normal)
        sideBarItem1_5.frame = CGRect(x: 20.0, y: 230.0, width: 30.0, height: 30.0)
        sideBarItem1_5.addTarget(self, action: "", forControlEvents: UIControlEvents.TouchUpInside)*/
        
        self.view!.addSubview(sideBarItem1_1)
        self.view!.addSubview(sideBarItem1_2)
        self.view!.addSubview(sideBarItem1_3)
        //self.view!.addSubview(sideBarItem1_4)
        //self.view!.addSubview(sideBarItem1_5)
    }
    
    func setUpSurfacesSideBar(){
        sideBarItem2_1.setImage(UIImage(named: "Flat Surface"), forState: UIControlState.Normal)
        sideBarItem2_1.frame = CGRect(x: 20.0, y: 75.0, width: 30.0, height: 10.0)
        sideBarItem2_1.addTarget(self, action: "createFlatSurface:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem2_2.setImage(UIImage(named: "Inclined Plane"), forState: UIControlState.Normal)
        sideBarItem2_2.frame = CGRect(x: 20.0, y: 100.0, width: 30.0, height: 30.0)
        sideBarItem2_2.addTarget(self, action: "createInclinedPlane:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem2_3.setImage(UIImage(named: "Drop Off"), forState: UIControlState.Normal)
        sideBarItem2_3.frame = CGRect(x: 5.0, y: 140.0, width: 60.0, height: 30.0)
        sideBarItem2_3.addTarget(self, action: "createDropOff:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem2_4.setImage(UIImage(named: "Rise"), forState: UIControlState.Normal)
        sideBarItem2_4.frame = CGRect(x: 5.0, y: 180.0, width: 60.0, height: 30.0)
        sideBarItem2_4.addTarget(self, action: "createRise:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem2_5.setImage(UIImage(named: "Wall"), forState: UIControlState.Normal)
        sideBarItem2_5.frame = CGRect(x: 20.0, y: 220.0, width: 15.0, height: 30.0)
        sideBarItem2_5.addTarget(self, action: "createWall:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem2_1)
        self.view!.addSubview(sideBarItem2_2)
        self.view!.addSubview(sideBarItem2_3)
        self.view!.addSubview(sideBarItem2_4)
        self.view!.addSubview(sideBarItem2_5)
    }
    
    func setUpForceVectorsSideBar(){
        sideBarItem3_1.setImage(UIImage(named: "Force Vector"), forState: UIControlState.Normal)
        sideBarItem3_1.frame = CGRect(x: 20.0, y: 70.0, width: 30.0, height: 30.0)
        sideBarItem3_1.addTarget(self, action: "createForceVector:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem3_2.setImage(UIImage(named: "Weight"), forState: UIControlState.Normal)
        sideBarItem3_2.frame = CGRect(x: 30.0, y: 110.0, width: 10.0, height: 30.0)
        sideBarItem3_2.addTarget(self, action: "createWeight:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem3_3.setImage(UIImage(named: "Friction"), forState: UIControlState.Normal)
        sideBarItem3_3.frame = CGRect(x: 18.0, y: 160.0, width: 35.0, height: 15.0)
        sideBarItem3_3.addTarget(self, action: "createFriction:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem3_4.setImage(UIImage(named: "Normal Force"), forState: UIControlState.Normal)
        sideBarItem3_4.frame = CGRect(x: 30.0, y: 190.0, width: 10.0, height: 30.0)
        sideBarItem3_4.addTarget(self, action: "createNormalForce:", forControlEvents: UIControlEvents.TouchUpInside)
        //sideBarItem3_5.setImage(UIImage(named: ""), forState: UIControlState.Normal)
        //sideBarItem3_5.frame = CGRect(x: 20.0, y: 230.0, width: 15.0, height: 30.0)
        //sideBarItem3_5.addTarget(self, action: "", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem3_1)
        self.view!.addSubview(sideBarItem3_2)
        self.view!.addSubview(sideBarItem3_3)
        self.view!.addSubview(sideBarItem3_4)
        //self.view!.addSubview(sideBarItem3_5)
    }
    
    func setUpConnectorsSideBar(){
        sideBarItem4_1.setImage(UIImage(named: "String"), forState: UIControlState.Normal)
        sideBarItem4_1.frame = CGRect(x: 20.0, y: 80.0, width: 30.0, height: 10.0)
        sideBarItem4_1.addTarget(self, action: "createString:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem4_2.setImage(UIImage(named: "Glue"), forState: UIControlState.Normal)
        sideBarItem4_2.frame = CGRect(x: 20.0, y: 110.0, width: 30.0, height: 30.0)
        sideBarItem4_2.addTarget(self, action: "createGlue:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem4_3.setImage(UIImage(named: "Putty"), forState: UIControlState.Normal)
        sideBarItem4_3.frame = CGRect(x: 20.0, y: 150.0, width: 30.0, height: 30.0)
        sideBarItem4_3.addTarget(self, action: "createPutty:", forControlEvents: UIControlEvents.TouchUpInside)
        sideBarItem4_4.setImage(UIImage(named: "Spring"), forState: UIControlState.Normal)
        sideBarItem4_4.frame = CGRect(x: 20.0, y: 190.0, width: 30.0, height: 30.0)
        sideBarItem4_4.addTarget(self, action: "createSpring:", forControlEvents: UIControlEvents.TouchUpInside)
        //sideBarItem4_5.setImage(UIImage(named: ""), forState: UIControlState.Normal)
        //sideBarItem4_5.frame = CGRect(x: 20.0, y: 230.0, width: 30.0, height: 30.0)
        //sideBarItem4_5.addTarget(self, action: "", forState: UIControlState.TouchUpInside)
        
        self.view!.addSubview(sideBarItem4_1)
        self.view!.addSubview(sideBarItem4_2)
        self.view!.addSubview(sideBarItem4_3)
        self.view!.addSubview(sideBarItem4_4)
        //self.view!.addSubview(sideBarItem4_5)
    }
    
    /*func setUpCategory5SideBar(){
        
    }*/
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    ----------------------------------------------------isInBounds()--------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/
    
    
    
    func isInBounds(node: SKSpriteNode){
        var rightBound = CGFloat()
        var leftBound = CGFloat()
        var upperBound = CGFloat()
        var lowerBound = CGFloat()
        rightBound = self.view!.frame.width - (node.size.width / 2)
        leftBound = CGRectGetMinX(self.view!.frame) + (node.size.width / 2)
        upperBound = self.view!.frame.height - (node.size.height / 2)
        lowerBound = CGRectGetMinY(self.frame) + (node.size.height / 2)
        
        if(node.position.x < leftBound || node.position.x > rightBound || node.position.y < upperBound || node.position.y > lowerBound){
            node.removeFromParent()
        }
    }
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    -------------------------------------------------------Targets----------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/
    
    
    
    @objc func goToMenu(sender: UIButton){
        let menuScene = MenuScene(size: self.size)
        
        self.view?.presentScene(menuScene, transition: SKTransition.crossFadeWithDuration(0.0))
        
        menuButton.removeFromSuperview()
        calculateButton.removeFromSuperview()
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        sideBarItem1_1.removeFromSuperview()
        sideBarItem1_2.removeFromSuperview()
        sideBarItem1_3.removeFromSuperview()
        //sideBarItem1_4.removeFromSuperview()
        //sideBarItem1_5.removeFromSuperview()
        sideBarItem2_1.removeFromSuperview()
        sideBarItem2_2.removeFromSuperview()
        sideBarItem2_3.removeFromSuperview()
        sideBarItem2_4.removeFromSuperview()
        sideBarItem2_5.removeFromSuperview()
        sideBarItem3_1.removeFromSuperview()
        sideBarItem3_2.removeFromSuperview()
        sideBarItem3_3.removeFromSuperview()
        sideBarItem3_4.removeFromSuperview()
        //sideBarItem3_5.removeFromSuperview()
        sideBarItem4_1.removeFromSuperview()
        sideBarItem4_2.removeFromSuperview()
        sideBarItem4_3.removeFromSuperview()
        sideBarItem4_4.removeFromSuperview()
        //sideBarItem4_5.removeFromSuperview()
        //sideBarItem5_1.removeFromSuperview()
        //sideBarItem5_2.removeFromSuperview()
        //sideBarItem5_3.removeFromSuperview()
        //sideBarItem5_4.removeFromSuperview()
        //sideBarItem5_5.removeFromSuperview()
        sideBarBackButton.removeFromSuperview()
        
        nodeCounter = 0
    }
    
    @objc func mainSideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        sideBarItem1_1.removeFromSuperview()
        sideBarItem1_2.removeFromSuperview()
        sideBarItem1_3.removeFromSuperview()
        //sideBarItem1_4.removeFromSuperview()
        //sideBarItem1_5.removeFromSuperview()
        sideBarItem2_1.removeFromSuperview()
        sideBarItem2_2.removeFromSuperview()
        sideBarItem2_3.removeFromSuperview()
        sideBarItem2_4.removeFromSuperview()
        sideBarItem2_5.removeFromSuperview()
        sideBarItem3_1.removeFromSuperview()
        sideBarItem3_2.removeFromSuperview()
        sideBarItem3_3.removeFromSuperview()
        sideBarItem3_4.removeFromSuperview()
        //sideBarItem3_5.removeFromSuperview()
        sideBarItem4_1.removeFromSuperview()
        sideBarItem4_2.removeFromSuperview()
        sideBarItem4_3.removeFromSuperview()
        sideBarItem4_4.removeFromSuperview()
        //sideBarItem4_5.removeFromSuperview()
        //sideBarItem5_1.removeFromSuperview()
        //sideBarItem5_2.removeFromSuperview()
        //sideBarItem5_3.removeFromSuperview()
        //sideBarItem5_4.removeFromSuperview()
        //sideBarItem5_5.removeFromSuperview()
        
        sideBarItem1.setImage(UIImage(named:"Masses"), forState: UIControlState.Normal)
        sideBarItem1.frame = CGRect(x: 20.0, y: 70.0, width: 30.0, height: 30.0)
        sideBarItem1.addTarget(self, action: "massesSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem1)
        
        sideBarItem2.setImage(UIImage(named:"Surfaces"), forState: UIControlState.Normal)
        sideBarItem2.frame = CGRect(x: 20.0, y: 120.0, width: 30.0, height: 30.0)
        sideBarItem2.addTarget(self, action: "surfacesSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem2)
        
        sideBarItem3.setImage(UIImage(named:"Force Vectors"), forState: UIControlState.Normal)
        sideBarItem3.frame = CGRect(x: 20.0, y: 170.0, width: 30.0, height: 30.0)
        sideBarItem3.addTarget(self, action: "forceVectorsSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem3)
        
        sideBarItem4.setImage(UIImage(named:"Connectors"), forState: UIControlState.Normal)
        sideBarItem4.frame = CGRect(x: 20.0, y: 220.0, width: 30.0, height: 30.0)
        sideBarItem4.addTarget(self, action: "connectorsSideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem4)
        
        /*sideBarItem5.setImage(UIImage(named:"Category 5 Image"), forState: UIControlState.Normal)
        sideBarItem5.frame = CGRect(x: 20.0, y: 230.0, width: 30.0, height: 30.0)
        sideBarItem5.addTarget(self, action: "cat5SideBar:", forControlEvents: UIControlEvents.TouchUpInside)
        
        self.view!.addSubview(sideBarItem5)*/
    }
    
    @objc func calculate(sender: UIButton){
        /*GO TO CALCULATE SCENE*/
        
        menuButton.removeFromSuperview()
        calculateButton.removeFromSuperview()
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        sideBarItem1_1.removeFromSuperview()
        sideBarItem1_2.removeFromSuperview()
        sideBarItem1_3.removeFromSuperview()
        //sideBarItem1_4.removeFromSuperview()
        //sideBarItem1_5.removeFromSuperview()
        sideBarItem2_1.removeFromSuperview()
        sideBarItem2_2.removeFromSuperview()
        sideBarItem2_3.removeFromSuperview()
        sideBarItem2_4.removeFromSuperview()
        sideBarItem2_5.removeFromSuperview()
        sideBarItem3_1.removeFromSuperview()
        sideBarItem3_2.removeFromSuperview()
        sideBarItem3_3.removeFromSuperview()
        sideBarItem3_4.removeFromSuperview()
        //sideBarItem3_5.removeFromSuperview()
        sideBarItem4_1.removeFromSuperview()
        sideBarItem4_2.removeFromSuperview()
        sideBarItem4_3.removeFromSuperview()
        sideBarItem4_4.removeFromSuperview()
        //sideBarItem4_5.removeFromSuperview()
        //sideBarItem5_1.removeFromSuperview()
        //sideBarItem5_2.removeFromSuperview()
        //sideBarItem5_3.removeFromSuperview()
        //sideBarItem5_4.removeFromSuperview()
        //sideBarItem5_5.removeFromSuperview()
        sideBarBackButton.removeFromSuperview()
        
        self.removeAllChildren()
    }
    
    @objc func massesSideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        
        setUpMassesSideBar()
    }
    
    @objc func surfacesSideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        
        setUpSurfacesSideBar()
    }
    
    @objc func forceVectorsSideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        
        setUpForceVectorsSideBar()
    }
    
    @objc func connectorsSideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        //sideBarItem5.removeFromSuperview()
        
        setUpConnectorsSideBar()
    }
    
    /*@objc func cat5SideBar(sender: UIButton){
        sideBarItem1.removeFromSuperview()
        sideBarItem2.removeFromSuperview()
        sideBarItem3.removeFromSuperview()
        sideBarItem4.removeFromSuperview()
        sideBarItem5.removeFromSuperview()
    
        setUpCategory5SideBar()
    }*/
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    -------------------------------------------------Create Physics Nodes---------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/
    
    var physicsObject = PhysicsObject(objectType: "Null")
    
    var physicsNode = [SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode(), SKSpriteNode()]
    var initialPosition = CGPoint(x: 275.0, y: 400.0)
    var initialSize = CGSize(width: 50.0, height: 50.0)
    
    var nodeCounter = 0
    
    @objc func createFrictionlessMass(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Frictionless Mass")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createAngularMass(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Angular Mass")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createFocalPoint(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Focal Point")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createFlatSurface(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Flat Surface")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createInclinedPlane(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Inclined Plane")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createDropOff(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Drop Off")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createRise(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Rise")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createWall(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Wall")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createForceVector(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Force Vector")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createWeight(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Weight")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createFriction(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Friction")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createNormalForce(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Normal Force")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createString(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "String")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createGlue(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Glue")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createPutty(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Putty")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    @objc func createSpring(sender: UIButton){
        if(nodeCounter < 32){
            physicsObject = PhysicsObject(objectType: "Spring")
            physicsNode[nodeCounter] = physicsObject.getPhysicsObject()
            
            self.addChild(physicsNode[nodeCounter])
            
            nodeCounter += 1
        }
    }
    
    
    
    /*----------------------------------------------------------------------------------------------------------------------------
    --------------------------------------------------Move Physics Nodes----------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------------*/
    
    
    var selectedNode = SKSpriteNode()
    var movableNodeName = "movable"
    
    func assignNames(){
        for(var i=0; i<32; i++){
            physicsNode[i].name = movableNodeName
        }
    }
    
    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {
        var positionInScene = CGPoint(x: 375.0, y: 400.0)
        
        for touch in touches {
            positionInScene = touch.locationInNode(self)
        }
        
        print("Touches Began")
        
        assignNames()
        
        selectNodeForTouch(positionInScene)
    }
    
    func degToRad(degree: Double) -> CGFloat {
        return CGFloat(Double(degree) / 180.0 * M_PI)
    }
    
    func selectNodeForTouch(touchLocation: CGPoint) {
        print(self.nodeAtPoint(touchLocation))
        let touchedNode = self.nodeAtPoint(touchLocation)
        print(touchedNode)
        
        if touchedNode is SKSpriteNode {
            if !selectedNode.isEqual(touchedNode) {
                selectedNode.removeAllActions()
                selectedNode.runAction(SKAction.rotateToAngle(0.0, duration: 0.1))
                
                selectedNode = touchedNode as! SKSpriteNode
                
                if touchedNode.name == movableNodeName {
                    let sequence = SKAction.sequence([SKAction.rotateByAngle(degToRad(-4.0), duration: 0.1),
                        SKAction.rotateByAngle(0.0, duration: 0.1),
                        SKAction.rotateByAngle(degToRad(4.0), duration: 0.1)])
                    selectedNode.runAction(SKAction.repeatActionForever(sequence))
                }
            }
        }
    }
    
    override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {
        var positionInScene = CGPoint(x: 375.0, y: 400.0)
        
        for touch in touches {
            positionInScene = touch.locationInNode(self)
        
            (self.nodeAtPoint(touch.previousLocationInNode(self))).position = positionInScene
        }
    }
}



























